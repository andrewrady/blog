[{"content":"","date":null,"permalink":"/","section":"Andrew Rady","summary":"","title":"Andrew Rady"},{"content":"New Blog Post #Its been a while since I last wrote a blog post here. I’ve wanted to start blogging again recently, but a lot has happened professionally and personal that has made it hard to getting back to it. More on that soon (All good)! I do plan on adding more content to this site to talk about side projects that I’ve been working on, and what I have learned from them.\nSwitch Things Up #I’ll also will be migrating this site from Hugo to a jekyll site. I really like Golang and Hugo has been nice (we use it at work as well) but the community and features the jekyll has is just hard to beat. So stay tuned for a new design coming out soon! One of the main reasons that has pulled my focus away is I have switched roles at work as a back end developer. The last few months I have been getting up to speed with all of our applications and tooling which has been a great learning experience. We’ve also moved in the last few months, so when I thought I was going to have more time write some blog posts everything changed. Now that we’re settled in I have more time to work on some side projects and talk about some of the cool new technologies around them. I already have one started on my personal development environment and work flow so stay tuned for that! Yes I use vim, but not arch\u0026hellip;.\n","date":"27 May 2021","permalink":"/posts/coming-back/","section":"Posts","summary":"New Blog Post #Its been a while since I last wrote a blog post here.","title":"Coming Back"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"Connecting your Rails application to a database #Rails default setup uses sqlite which is a great way to get starting building applications, but at some point we will need to connect to a real database. Whether you need functionality that is specific to a certain database, or you want to simulate your production environment more. Connecting to a database is pretty easy with Rails. The first thing you will need is a database installed on your computer. For my apps I primarily use Postgres and pgAdmin as my GUI.\nFirst we will also want to add a gem for Postgres in our Gemfile\ngem ‘pg’\nThen run the command bundle install. Next in our Rails app we want to update the database.yml file in the config directory. There is four sections, default, development, test, and production. For a basic configuration set the default and any changes you may need in the different environments can be overridden.\ndefault: \u0026amp;default adapter: postgresql encoding: unicode username: postgres password: postgres pool: 5 timeout: 5000 host: 127.0.0.1 development: \u0026lt;\u0026lt;: *default database: TestApp test: \u0026lt;\u0026lt;: *default database: TestApp_test production: \u0026lt;\u0026lt;: *default database: \u0026lt;%= ENV[\u0026#39;POSTGRES_DB\u0026#39;] %\u0026gt; Let’s break down this file a little. The default is where most of the key information is at. I have the username and password set to postgres, but for a real application you would want to put these into environment variables. The host is the IP address for your database. The other environments have a line \u0026lt;\u0026lt;: *default which pulls the config options from the default section. If you need to change anything for these environments do so after that line.\n","date":"3 March 2020","permalink":"/posts/connecting-your-rails-app-to-a-database/","section":"Posts","summary":"Connecting your Rails application to a database #Rails default setup uses sqlite which is a great way to get starting building applications, but at some point we will need to connect to a real database.","title":"Connecting Your Rails App to a Database"},{"content":"","date":null,"permalink":"/tags/postgres/","section":"Tags","summary":"","title":"Postgres"},{"content":"","date":null,"permalink":"/tags/rails/","section":"Tags","summary":"","title":"Rails"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/api/","section":"Tags","summary":"","title":"Api"},{"content":"","date":null,"permalink":"/tags/cors/","section":"Tags","summary":"","title":"Cors"},{"content":"","date":null,"permalink":"/tags/golang/","section":"Tags","summary":"","title":"Golang"},{"content":"Handling CORS with Gorilla Mux #In an earlier post I talked about create an API with golang using a few packages. One of the main ones packages many people use is mux for routes. This makes it easier handles routes within our application. Now we need setup our application to allow certain sites to talk with our api. Luckily Gorilla has another package that integrates seamlessly with Mux.\nSetting up our routes #Let\u0026rsquo;s make a function in our main.go that handles the routes and then call it in our main function\nimport ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;github.com/gorilla/mux\u0026#34; ) func routes() { myRouter := mux.NewRouter().StrictSlash(true) myRouter.Handle(\u0026#34;/records\u0026#34;, RecordsHandler).Methods(\u0026#34;GET) log.Fatal(http:ListenAndServe(\u0026#34;:8080\u0026#34;, myRouter)) } func main() { fmt.Println(\u0026#34;Server is running on port 8080\u0026#34; ) routes() } Here we have a basic implantation with one route, /records which refers to the function RecordsHandler. I didn\u0026rsquo;t have that in the code snippet, but that function handles the logic of getting the records and returning the json. This works great if the application, is on the domain. If not then this is where we need to add some cors policies.\nGorilla Handlers #Lucky gorilla has the handlers package that plays really nicely with mux. All we need to do is import it and add a few more lines. First lets import github.com/gorilla/handlers, then we need to add some variables to configure for headers, methods, and origins.\nheaders := handlers.AllowedHeaders([]string{\u0026#34;X-Requested-With:\u0026#34;, \u0026#34;Content-Type\u0026#34;}) methods := handlers.AllowedMethods([]string{\u0026#34;GET\u0026#34;, \u0026#34;POST\u0026#34;, \u0026#34;PUT\u0026#34;, \u0026#34;DELETE\u0026#34;}) origins := handlers.AllowedOrigins([]string{\u0026#34;www.somewebsite.com\u0026#34;}) This allows the headers to be set with content-type so allow for json, the standard crud actions in the methods, and the origin sets where the api is allowed to give this information too. Now we need to alter the listen and server to passes these in.\nlog.Fatal(http.ListenAndServe(\u0026#34;8080\u0026#34;, handlers.CORS(headers, methods, origins)(myRouter))) This will allow our api to be able to communication with our applications on different domains. This is great if we only want certain sites to be able to access our data. If we want to open the api and be public we can update the string in the origin variable to a wildcard,\norigins := handlers.AllowedOrigins([]string{\u0026#34;*\u0026#34;}) Wrap up #Below is the full program from above with the cors configuration as well,\nimport ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;github.com/gorilla/mux\u0026#34; \u0026#34;github.com/gorilla/handlers\u0026#34; ) func routes() { myRouter := mux.NewRouter().StrictSlash(true) headers := handlers.AllowedHeaders([]string{\u0026#34;X-Requested-With:\u0026#34;, \u0026#34;Content-Type\u0026#34;}) methods := handlers.AllowedMethods([]string{\u0026#34;GET\u0026#34;, \u0026#34;POST\u0026#34;, \u0026#34;PUT\u0026#34;, \u0026#34;DELETE\u0026#34;}) origins := handlers.AllowedOrigins([]string{\u0026#34;www.somewebsite.com\u0026#34;}) myRouter.Handle(\u0026#34;/records\u0026#34;, RecordsHandler).Methods(\u0026#34;GET) log.Fatal(http.ListenAndServe(\u0026#34;8080\u0026#34;, handlers.CORS(headers, methods, origins)(myRouter))) } func main() { fmt.Println(\u0026#34;Server is running on port 8080\u0026#34; ) routes() } ","date":"4 May 2019","permalink":"/posts/mux-cors/","section":"Posts","summary":"Handling CORS with Gorilla Mux #In an earlier post I talked about create an API with golang using a few packages.","title":"Mux Cors"},{"content":"Golang First API #I have been following Golang for a little but. It seemed interesting to me for a few reasons. One major one was the speed of it. Another was it\u0026rsquo;s syntax is similar to python. I am no python developer, but I have made a few side project with it. SO I decided to update and an aging Rails application. It\u0026rsquo;s just a simple crud application that displays martial arts rings at tournaments. While I could write the entire website with Go I opted in to make an api. The reason is I want to make a React site and mobile apps made with React Native. It\u0026rsquo;s a pretty simple rest API that needed to connect to a database. I used a few packages to make development practical\nMux (for route handling) gorm (an orm for golang to interface with databases) jwt-go [to help create jwt for Auth] bcrypt (to hash passwords) Things I have learned #importing packages are fairly similar to other languages as python. In Golang we can import a package like,\nimport(\u0026#34;os\u0026#34;) or for multiple imports,\nimport( \u0026#34;os\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; ) These are packages that come with Go, but we cna an import other people\u0026rsquo;s packages with an import path to their github.\nimport( \u0026#34;os\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;github.com/gorilla/mux ) So importing packages are pretty simple. While there seems to be a few different dependency managers in Golang there is no standard at this time like NPM for node. For this project I ended up using dep More on this in another post.\nAnother thing I learned from this project is export functions and how to use them in different files. This project is pretty small so the main.go handles all of the routing, and the functions that handle all of the logic is broken into different files. For example the /ring route returns all of the active rings. The function that handles communication to the database and return the values in json is in the rings.go file. For the main.go to be able to use the AllRings function all we need to do is capitalize the function. Any function in that file that isn\u0026rsquo;t capitalized can only be used within that file. Personally I like this simple practice. I have forgot to export a function in larger files and took sime valuable time debugging to figure out I forgot this.\nWrap up #The project is hosted in github and still needs some work. This is a side project that gets used only a few times a year so I continue to work on it from time to time. If you want to check it out head over and have a look at my github\n","date":"11 March 2019","permalink":"/posts/go-api/","section":"Posts","summary":"Golang First API #I have been following Golang for a little but.","title":"Go Api"},{"content":"Rails development on Windows #Developing Rails applications on windows has always been a pain. It\u0026rsquo;s simple enough to install ruby and the need gems to get a basic Rails application started, but in time developers will run into problems. A lot of gem work fine in a windows environment, but some do not compile down correctly and this is the main issue with developing on Windows. For this reason many people who need to work on Rails applications are running their development environment on OSX or Linux, including me. With Windows WSL I decided to see if I can get a working, acceptable development environment on a Windows computer. After some trail and error (plus some help from google) it\u0026rsquo;s pretty good.\nWindows Subsystem for Linux (WSL) #Microsoft now lets us install Linux distro system directly on our windows computer easily from the Microsoft Store. Before we do this though we need to open Powershell as an Admin run\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux and then restart our computer. The easiest way to install a Linux distro is from the Windows Store, just open it up and search for your preferred distro. Personally I am using Ubuntu because I have the most experience with that one. For more details on installing WSL on windows check out this article. If we search for Ubuntu from the Windows search it will open a terminal that we can setup everything.\nSetting up our Environment #For now we are going to do a simple install and talk about a few gotchas developing with WSL. Normally I would recommend installing Ruby using RVM so you can easily change versions if need be. For now lets just do a simple install of ruby. First update our new system and then install ruby\nsudo apt-get update sudo apt-get install ruby-full We can check our install and the version with\nruby -v and we should get a result similar too\nruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-linux] Now we need to install Bundler which is a package manager similar to npm for node development. We can do this with\ngem install bundler and finally lets install Rails!\ngem install rails There we go, a full Linux environment to develop rails applications without any compatibility issues. We can spin up a project and run it.\nrails new test_app cd test_app rails s From there we can see the front page showing we are running a rails application But wait theres more! #If you are a vim user you are good, but us new kids to the block who uses flashy text editors then there is one small gotcha. Window doesn\u0026rsquo;t want you going into the WSL and manually editing files. This can causes us problems if you use something like vscode. After some research Microsoft has setup a directory to work on project and be able to open them on the Windows side and work like normal. In the WSL terminal we can get to this by,\ncd /mnt/c/dev/ please note that the c in the path is your hard drive. So if you have changed this change the path to reflex that. In this directory we can store our Rails applications and open them with any text editor or IDE!\n","date":"16 February 2019","permalink":"/posts/rails-windows-development/","section":"Posts","summary":"Rails development on Windows #Developing Rails applications on windows has always been a pain.","title":"Rails Windows Development"},{"content":"","date":null,"permalink":"/tags/wsl/","section":"Tags","summary":"","title":"Wsl"},{"content":"Hello, World! #My name is Andrew Rady and I am currently a front end developer at Ritter Insurance Marketing working with Vue. I have been writing some blog post on our company blog at rimdev.io, but I wanted to start a personal one. On rimdev.io most of my articles are around vue since that is what I work on mostly, but I want to be able to share some of my experiences from side projects. I am person who doesn\u0026rsquo;t write a lot so a personal goal of 2019 is to get better, and the best way to improve on something is to do it.\nA little more about me #At work I am a front end developer and our main framework we support currently is Vue.js, but we also have other apps that are written in Angular. Most of my day is working in Javascript connecting to our apis and sometimes working in our back which is asp.net. One of our internal sites is written in Hugo and that was my first experience and I really liked it. So much that this site is written in Hugo. In my personal time I write software mostly for a local martial arts community. I run a studio which I wrote our internal software that is a rails api and a vue front end. I am also interested in Golang and wrote an api for a martial arts tournament schedule app. I have a few of these projects public on my github.\nAs I continue to work on these applications I will share my experiences, what I learned, how I fix problems, and more.\n","date":"3 February 2019","permalink":"/posts/first-post/","section":"Posts","summary":"Hello, World!","title":"First Post"},{"content":"","date":null,"permalink":"/tags/javascript/","section":"Tags","summary":"","title":"Javascript"},{"content":"","date":null,"permalink":"/tags/vue.js/","section":"Tags","summary":"","title":"Vue.js"},{"content":"I am a software engineer in Boise Idaho who specializes in back end development. My primary tools have been dotnet and related tools, but I\u0026rsquo;m a Linux guy. My blog is a place for me to share some of the personal projects and tools I have been working on lately. You can also checkout some of my work blogs for my other writing at RIMdev.io\nFavorite Topics #Recently my main focus has been working with Dotnet and Typescript but also enjoy working with Go. I\u0026rsquo;ve worked with docker for automated tasks including testing up test suite runners and batch processes. The next techonology I\u0026rsquo;m going to focus on is htmlx.\nSkills #A few things I\u0026rsquo;ve worked with in the past\u0026hellip;\nPrograming Languages #C# • JavaScript • Typescript • Go\nOperating Systems \u0026amp; Code Editors # Work: Windows Personal: Ubuntu (using i3) Editors Neovim Rider (C#) Framework \u0026amp; General Software #Dotnet Framework • Dotnet Core • Vue.js • Neovim • SQL • Azure • Docker\n","date":"1 January 0001","permalink":"/about/","section":"Andrew Rady","summary":"I am a software engineer in Boise Idaho who specializes in back end development.","title":"About"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"My name is Andrew Rady and I\u0026rsquo;ve been a professional software developers for almost ten years. Over those years I\u0026rsquo;ve worked on small to large teams creating solutions for companies to improve businesses. I enjoy writing code, but what drives me is solving real world problems the best way possible. I love working with small to medium size teams with ttalented memebers who push each other to improve and create the best solutions.\nRecent #Back End Engineer - Ritter Insurance Marketing #2021 - present\nAs a back end developer the main focus is to keep our ecosystems healthy while adding improvements This includes updating and adding new features to our api(s), to maintaining elastic search, and maintaining our hangfire jobs. Another important milestone was the connection of third party services to our internal system. These include many common services like Sendgrid, and Twillo, to more specialized health care specific api(s).\nHightlights # Planning architecture and implementing multi-level ecosystems of multiple microservices Handling authentication project integrated with OAuth and SSO through Azure Directory that handline hundreds of users Developer toolings for release process of different environments for multiple teams Create and maintain ecosystem of microservices that range from apis to MVC web apps Front End Engineer - Ritter Insurance Marketing #2017-2021\nAs a front end engineer that primary focus was to create amazing, modern, dynamic systems or users. The tools developed were used by internal staff to assist thousands of users. One of the main responsibilities was to take a range of apis in our ecosystem to create a platform that’s a seamless experience.\nHighlights # Created and maintained npm package for internal tools Part of team that developed tools to create online forms to take genric pdf forms and create onlone solutions Started blogging about my experieance Web Developer - Eaglewood Homes #2015-2016\nThe main focus while at Eaglewood homes was to develop a new website for the company.It was common to take web pages designed in photoshop and coding them into dynamic pages. We also added new additional features to the website like a blog to the site to allow more interaction of the site, and to drive up the seo. Another major feature we created was to allow employees to add information about the status of a home during the build process to the customers.The backend of the website was written in pure PHP and MYSQL for data\nHighlights # Redisgned entire site to be modern and responsive Updated admin section to staff Implamented blog and search functionality Made pages interactive with up to date JavaScript tools Education #Even though I have many years of professional experience I beilieve education is important so I decided to go back to University after Covid to get my degree in Computer Science\nB.S Computer Science #Boise State University (2021 - Present)\n","date":"1 January 0001","permalink":"/resume/","section":"Andrew Rady","summary":"My name is Andrew Rady and I\u0026rsquo;ve been a professional software developers for almost ten years.","title":"Resume"}]