[{"content":"","date":null,"permalink":"/","section":"Andrew Rady","summary":"","title":"Andrew Rady"},{"content":"Catching Up #It\u0026rsquo;s been a couple years since I started this blog and there hasn\u0026rsquo;t been much progress. There is a couple different factors but the main one has been focus. I\u0026rsquo;ve been working Ritter Insurance Marketing since 2017. I started their a junior front end developer and in 2020 I moved over as a back end developer. Working primarily on back end services written in Dotnet. I started this blog a couple of years ago to try write down my thoughts and some experiences, but obviously didn\u0026rsquo;t keep up on that.\nTime As A Front-End Developer #The time I spent on the front end is where I learned the most. It\u0026rsquo;s not just the technical stuff too - much is how to work in a software development team. A lot of this are the things you don\u0026rsquo;t get in school. Aspects like working with others, git, how to do good code reviews, meeting (everyone\u0026rsquo;s favorite), and so much more. I also got my real first hand experience of how powerful JavaScript can be. I worked with some great and extremely talented people and learned as much as possible. Framework of choice? Vue - I\u0026rsquo;ll still stand pick Vue over React and Angular any day! I also picked on other important skills working with tools like webpack, vite, creating NPN packages, etc.\nWhile working on the front-end team we were able to go to some amazing conferences\n2017 VueConf in New Orleans 2018 VueConf in Tampa 2019 An Event Apart in Chicago 2020 VueConf in Austin Back-End Developer #Late 2020 I switch to our backend team. I was a little nervous about the choice for a couple of years. First, the front end team was a great group and I didn\u0026rsquo;t want to \u0026ldquo;leave\u0026rdquo; them. Although we all work together I was worried about not being part of that group. Another was my ability to adapt and work with C# and Dotnet. It was a pretty big change going from JavaScript, a dynamic run time language to a static precompiled language like C#. Overall it was a challenge and I learned a lot over the years - backend is a whole other beast. Here I mostly worked on micro-services that were restful apis, but also got to work with other tools. Azure functions, Terraform, and our own developed bot that integrated with our deployment process.\nSome other cool conference\n2023 VSLive in Las Vegas What I\u0026rsquo;m Currently Doing #I\u0026rsquo;m still working as a back-end developer here at Ritter Insurance marketing. It has been a turbulent year as we\u0026rsquo;ve been assisting a sister team at Integrity, and looking to fully integrate here soon. Doing so has let me meet some great engineers over there and I\u0026rsquo;m looking forward to improving their systems. Seeing how other teams work and operate together has been super insightful. I\u0026rsquo;m hopeful and excited to see what our teams can create together.\n","date":"8 December 2024","permalink":"/posts/catching-up/","section":"Posts","summary":"","title":"Catching Up"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"My Experience Building A Rails App As A Dotnet Developer #I use to write a lot of rails applications when I was newer as a developer. Fast forward almost a decade later with professional experience, I thought I would look into rails again. I\u0026rsquo;ve slightly followed the progression of rails over the years and agree with some points of DDH\u0026rsquo;s. Main about JavaScript and how it\u0026rsquo;s become overly complex for web apps. Although, I personally love static type languages. I know shocker - coming from a dotnet developer.\nGoal #I wanted to create a basic crud application that mimicked an existing application I\u0026rsquo;ve built in dotnet. This way I didn\u0026rsquo;t have to worry about what I was making..and be able to focus more on ruby and rails. It was a pretty simple mvc product that focused on three main points.\nStandard CRUD workflow for a handful on models Authentication Background jobs Of course, there was more minor details on the architecture but I want to focus on more of my experience writing the application\nWhat I liked #The last time I wrote a Rails application in any real fashion has to be close to eight years. A lot has changed in the web world since then! The main point I really liked was just how easy it was to get started. I remembered many of the cli commands to generate models and controllers. That is a huge because anyone who works with these tools know how many there are! Just that alone I was able to scaffold out a large amount very quickly. Another great thing was Rails documentation. When I didn\u0026rsquo;t know how to setup something like nested forms for child models I was able to \u0026ldquo;easily\u0026rdquo; find how to do it directly on their documentation site. I quotes because easy can be relative and while it was super convenient once I found it - it took me some research to get there. Seriously, Rails documentation is great and can easily be navigated to find great gems (see what I did there)! Lastly, the plugin ecosystem is great. I was able to easily install the few gems I needed to get up and running. Since the app was pretty slim I really only need devise for authentication and sidekiq for sidejobs. I\u0026rsquo;m sure if this need to be put into production things would become more complex. For example, devise is a great way to start authentication but it would probably be worth integrating it with OAuth as well.\nWhat I didn\u0026rsquo;t like #Rails is known for convention over configuration and overall I think that is great perspective. The issue is when you\u0026rsquo;re not in a specific domain it can be hard to know how it should be done. I ran into this situation a h handful of times. Figuring out nested attributes and how to pass them into the parent controller was \u0026ldquo;annoying\u0026rdquo; at first, but once I knew how Rails wanted it setup it was simple. Another major point was some of the helpers for forms. Nested forms and how to get them setup was enough to make me second guess my entire decision. I was almost to the point of just manually writing out the forms in html. Lucky after some research on the docs I was able to figure it out. This one is a personal problem\u0026hellip;I missed having static types. There was more then once dealing with fairly complex logic that I messed up types and had to step through the logs to see what was going on.\nConclusion #Ruby on Rails gets a lot of flack from the community. Most of the criticism are unjust and blown way out of proportion in my opinion. Using the correct tool for the requirements and the developer behind the tool is just, if not more important. I\u0026rsquo;ve worked on technologies that you would expect to be more performance based on the stack, but the choices of prior developers were not great. At the end of the day most web applications are just basic CRUD applications with business logic. Sure there are out lairs that need a higher performance stack or language like Go or Rust. Most of my personal projects that are in use are in either Dotnet or Go but if I find a small fit for a Rails application I would consider adding it to my small ecosystem.\n","date":"4 December 2024","permalink":"/posts/rails-experience/","section":"Posts","summary":"","title":"Rails Experience"},{"content":"Connecting your Rails application to a database #Rails default setup uses sqlite which is a great way to get starting building applications, but at some point we will need to connect to a real database. Whether you need functionality that is specific to a certain database, or you want to simulate your production environment more. Connecting to a database is pretty easy with Rails. The first thing you will need is a database installed on your computer. For my apps I primarily use Postgres and pgAdmin as my GUI.\nFirst we will also want to add a gem for Postgres in our Gemfile\ngem ‘pg’\nThen run the command bundle install. Next in our Rails app we want to update the database.yml file in the config directory. There is four sections, default, development, test, and production. For a basic configuration set the default and any changes you may need in the different environments can be overridden.\ndefault: \u0026amp;default adapter: postgresql encoding: unicode username: postgres password: postgres pool: 5 timeout: 5000 host: 127.0.0.1 development: \u0026lt;\u0026lt;: *default database: TestApp test: \u0026lt;\u0026lt;: *default database: TestApp_test production: \u0026lt;\u0026lt;: *default database: \u0026lt;%= ENV[\u0026#39;POSTGRES_DB\u0026#39;] %\u0026gt; Let’s break down this file a little. The default is where most of the key information is at. I have the username and password set to postgres, but for a real application you would want to put these into environment variables. The host is the IP address for your database. The other environments have a line \u0026lt;\u0026lt;: *default which pulls the config options from the default section. If you need to change anything for these environments do so after that line.\n","date":"3 March 2020","permalink":"/posts/connecting-your-rails-app-to-a-database/","section":"Posts","summary":"","title":"Connecting Your Rails App to a Database"},{"content":"","date":null,"permalink":"/tags/postgres/","section":"Tags","summary":"","title":"Postgres"},{"content":"","date":null,"permalink":"/tags/rails/","section":"Tags","summary":"","title":"Rails"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/api/","section":"Tags","summary":"","title":"Api"},{"content":"","date":null,"permalink":"/tags/cors/","section":"Tags","summary":"","title":"Cors"},{"content":"","date":null,"permalink":"/tags/golang/","section":"Tags","summary":"","title":"Golang"},{"content":"Handling CORS with Gorilla Mux #In an earlier post I talked about create an API with golang using a few packages. One of the main ones packages many people use is mux for routes. This makes it easier handles routes within our application. Now we need setup our application to allow certain sites to talk with our api. Luckily Gorilla has another package that integrates seamlessly with Mux.\nSetting up our routes #Let\u0026rsquo;s make a function in our main.go that handles the routes and then call it in our main function\nimport ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;github.com/gorilla/mux\u0026#34; ) func routes() { myRouter := mux.NewRouter().StrictSlash(true) myRouter.Handle(\u0026#34;/records\u0026#34;, RecordsHandler).Methods(\u0026#34;GET) log.Fatal(http:ListenAndServe(\u0026#34;:8080\u0026#34;, myRouter)) } func main() { fmt.Println(\u0026#34;Server is running on port 8080\u0026#34; ) routes() } Here we have a basic implantation with one route, /records which refers to the function RecordsHandler. I didn\u0026rsquo;t have that in the code snippet, but that function handles the logic of getting the records and returning the json. This works great if the application, is on the domain. If not then this is where we need to add some cors policies.\nGorilla Handlers #Lucky gorilla has the handlers package that plays really nicely with mux. All we need to do is import it and add a few more lines. First lets import github.com/gorilla/handlers, then we need to add some variables to configure for headers, methods, and origins.\nheaders := handlers.AllowedHeaders([]string{\u0026#34;X-Requested-With:\u0026#34;, \u0026#34;Content-Type\u0026#34;}) methods := handlers.AllowedMethods([]string{\u0026#34;GET\u0026#34;, \u0026#34;POST\u0026#34;, \u0026#34;PUT\u0026#34;, \u0026#34;DELETE\u0026#34;}) origins := handlers.AllowedOrigins([]string{\u0026#34;www.somewebsite.com\u0026#34;}) This allows the headers to be set with content-type so allow for json, the standard crud actions in the methods, and the origin sets where the api is allowed to give this information too. Now we need to alter the listen and server to passes these in.\nlog.Fatal(http.ListenAndServe(\u0026#34;8080\u0026#34;, handlers.CORS(headers, methods, origins)(myRouter))) This will allow our api to be able to communication with our applications on different domains. This is great if we only want certain sites to be able to access our data. If we want to open the api and be public we can update the string in the origin variable to a wildcard,\norigins := handlers.AllowedOrigins([]string{\u0026#34;*\u0026#34;}) Wrap up #Below is the full program from above with the cors configuration as well,\nimport ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;github.com/gorilla/mux\u0026#34; \u0026#34;github.com/gorilla/handlers\u0026#34; ) func routes() { myRouter := mux.NewRouter().StrictSlash(true) headers := handlers.AllowedHeaders([]string{\u0026#34;X-Requested-With:\u0026#34;, \u0026#34;Content-Type\u0026#34;}) methods := handlers.AllowedMethods([]string{\u0026#34;GET\u0026#34;, \u0026#34;POST\u0026#34;, \u0026#34;PUT\u0026#34;, \u0026#34;DELETE\u0026#34;}) origins := handlers.AllowedOrigins([]string{\u0026#34;www.somewebsite.com\u0026#34;}) myRouter.Handle(\u0026#34;/records\u0026#34;, RecordsHandler).Methods(\u0026#34;GET) log.Fatal(http.ListenAndServe(\u0026#34;8080\u0026#34;, handlers.CORS(headers, methods, origins)(myRouter))) } func main() { fmt.Println(\u0026#34;Server is running on port 8080\u0026#34; ) routes() } ","date":"4 May 2019","permalink":"/posts/mux-cors/","section":"Posts","summary":"","title":"Mux Cors"},{"content":"Golang First API #I have been following Golang for a little but. It seemed interesting to me for a few reasons. One major one was the speed of it. Another was it\u0026rsquo;s syntax is similar to python. I am no python developer, but I have made a few side project with it. SO I decided to update and an aging Rails application. It\u0026rsquo;s just a simple crud application that displays martial arts rings at tournaments. While I could write the entire website with Go I opted in to make an api. The reason is I want to make a React site and mobile apps made with React Native. It\u0026rsquo;s a pretty simple rest API that needed to connect to a database. I used a few packages to make development practical\nMux (for route handling) gorm (an orm for golang to interface with databases) jwt-go [to help create jwt for Auth] bcrypt (to hash passwords) Things I have learned #importing packages are fairly similar to other languages as python. In Golang we can import a package like,\nimport(\u0026#34;os\u0026#34;) or for multiple imports,\nimport( \u0026#34;os\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; ) These are packages that come with Go, but we cna an import other people\u0026rsquo;s packages with an import path to their github.\nimport( \u0026#34;os\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;github.com/gorilla/mux ) So importing packages are pretty simple. While there seems to be a few different dependency managers in Golang there is no standard at this time like NPM for node. For this project I ended up using dep More on this in another post.\nAnother thing I learned from this project is export functions and how to use them in different files. This project is pretty small so the main.go handles all of the routing, and the functions that handle all of the logic is broken into different files. For example the /ring route returns all of the active rings. The function that handles communication to the database and return the values in json is in the rings.go file. For the main.go to be able to use the AllRings function all we need to do is capitalize the function. Any function in that file that isn\u0026rsquo;t capitalized can only be used within that file. Personally I like this simple practice. I have forgot to export a function in larger files and took sime valuable time debugging to figure out I forgot this.\nWrap up #The project is hosted in github and still needs some work. This is a side project that gets used only a few times a year so I continue to work on it from time to time. If you want to check it out head over and have a look at my github\n","date":"11 March 2019","permalink":"/posts/go-api/","section":"Posts","summary":"","title":"Go Api"},{"content":"Rails development on Windows #Developing Rails applications on windows has always been a pain. It\u0026rsquo;s simple enough to install ruby and the need gems to get a basic Rails application started, but in time developers will run into problems. A lot of gem work fine in a windows environment, but some do not compile down correctly and this is the main issue with developing on Windows. For this reason many people who need to work on Rails applications are running their development environment on OSX or Linux, including me. With Windows WSL I decided to see if I can get a working, acceptable development environment on a Windows computer. After some trail and error (plus some help from google) it\u0026rsquo;s pretty good.\nWindows Subsystem for Linux (WSL) #Microsoft now lets us install Linux distro system directly on our windows computer easily from the Microsoft Store. Before we do this though we need to open Powershell as an Admin run\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux and then restart our computer. The easiest way to install a Linux distro is from the Windows Store, just open it up and search for your preferred distro. Personally I am using Ubuntu because I have the most experience with that one. For more details on installing WSL on windows check out this article. If we search for Ubuntu from the Windows search it will open a terminal that we can setup everything.\nSetting up our Environment #For now we are going to do a simple install and talk about a few gotchas developing with WSL. Normally I would recommend installing Ruby using RVM so you can easily change versions if need be. For now lets just do a simple install of ruby. First update our new system and then install ruby\nsudo apt-get update sudo apt-get install ruby-full We can check our install and the version with\nruby -v and we should get a result similar too\nruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-linux] Now we need to install Bundler which is a package manager similar to npm for node development. We can do this with\ngem install bundler and finally lets install Rails!\ngem install rails There we go, a full Linux environment to develop rails applications without any compatibility issues. We can spin up a project and run it.\nrails new test_app cd test_app rails s From there we can see the front page showing we are running a rails application But wait theres more! #If you are a vim user you are good, but us new kids to the block who uses flashy text editors then there is one small gotcha. Window doesn\u0026rsquo;t want you going into the WSL and manually editing files. This can causes us problems if you use something like vscode. After some research Microsoft has setup a directory to work on project and be able to open them on the Windows side and work like normal. In the WSL terminal we can get to this by,\ncd /mnt/c/dev/ please note that the c in the path is your hard drive. So if you have changed this change the path to reflex that. In this directory we can store our Rails applications and open them with any text editor or IDE!\n","date":"16 February 2019","permalink":"/posts/rails-windows-development/","section":"Posts","summary":"","title":"Rails Windows Development"},{"content":"","date":null,"permalink":"/tags/wsl/","section":"Tags","summary":"","title":"Wsl"},{"content":"Hello, World! #My name is Andrew Rady and I am currently a front end developer at Ritter Insurance Marketing working with Vue. I have been writing some blog post on our company blog at rimdev.io, but I wanted to start a personal one. On rimdev.io most of my articles are around vue since that is what I work on mostly, but I want to be able to share some of my experiences from side projects. I am person who doesn\u0026rsquo;t write a lot so a personal goal of 2019 is to get better, and the best way to improve on something is to do it.\nA little more about me #At work I am a front end developer and our main framework we support currently is Vue.js, but we also have other apps that are written in Angular. Most of my day is working in Javascript connecting to our apis and sometimes working in our back which is asp.net. One of our internal sites is written in Hugo and that was my first experience and I really liked it. So much that this site is written in Hugo. In my personal time I write software mostly for a local martial arts community. I run a studio which I wrote our internal software that is a rails api and a vue front end. I am also interested in Golang and wrote an api for a martial arts tournament schedule app. I have a few of these projects public on my github.\nAs I continue to work on these applications I will share my experiences, what I learned, how I fix problems, and more.\n","date":"3 February 2019","permalink":"/posts/first-post/","section":"Posts","summary":"","title":"First Post"},{"content":"","date":null,"permalink":"/tags/javascript/","section":"Tags","summary":"","title":"Javascript"},{"content":"","date":null,"permalink":"/tags/vue.js/","section":"Tags","summary":"","title":"Vue.js"},{"content":"I am a software engineer in Boise Idaho who specializes in back end development. My primary tools have been dotnet and related tools, but I\u0026rsquo;m a Linux guy. My blog is a place for me to share some of the personal projects and tools I have been working on lately. You can also checkout some of my work blogs for my other writing at RIMdev.io\nFavorite Topics #Recently my main focus has been working with Dotnet and Typescript but also enjoy working with Go. I\u0026rsquo;ve worked with docker for automated tasks including testing up test suite runners and batch processes. The next technology I\u0026rsquo;m going to focus on is htmlx.\nSkills #A few things I\u0026rsquo;ve worked with in the past\u0026hellip;\nPrograming Languages #C# • JavaScript • Typescript • Go\nOperating Systems \u0026amp; Code Editors # Work: Windows Personal: Ubuntu (using i3) Editors Neovim Rider (C#) Framework \u0026amp; General Software #Dotnet Framework • Dotnet Core • Vue.js • Neovim • SQL • Azure • Docker\n","date":"1 January 0001","permalink":"/about/","section":"Andrew Rady","summary":"","title":"About"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"My name is Andrew Rady and I\u0026rsquo;ve been a professional software developers for almost ten years. Over those years I\u0026rsquo;ve worked on small to large teams creating solutions for companies to improve businesses. I enjoy writing code, but what drives me is solving real world problems the best way possible. I love working with small to medium size teams with ttalented memebers who push each other to improve and create the best solutions.\nRecent #Back End Engineer - Ritter Insurance Marketing #2021 - present\nAs a back end developer the main focus is to keep our ecosystems healthy while adding improvements This includes updating and adding new features to our api(s), to maintaining elastic search, and maintaining our hangfire jobs. Another important milestone was the connection of third party services to our internal system. These include many common services like Sendgrid, and Twillo, to more specialized health care specific api(s).\nHightlights # Planning architecture and implementing multi-level ecosystems of multiple microservices Handling authentication project integrated with OAuth and SSO through Azure Directory that handline hundreds of users Developer toolings for release process of different environments for multiple teams Create and maintain ecosystem of microservices that range from apis to MVC web apps Front End Engineer - Ritter Insurance Marketing #2017-2021\nAs a front end engineer that primary focus was to create amazing, modern, dynamic systems or users. The tools developed were used by internal staff to assist thousands of users. One of the main responsibilities was to take a range of apis in our ecosystem to create a platform that’s a seamless experience.\nHighlights # Created and maintained npm package for internal tools Part of team that developed tools to create online forms to take genric pdf forms and create onlone solutions Started blogging about my experieance Web Developer - Eaglewood Homes #2015-2016\nThe main focus while at Eaglewood homes was to develop a new website for the company.It was common to take web pages designed in photoshop and coding them into dynamic pages. We also added new additional features to the website like a blog to the site to allow more interaction of the site, and to drive up the seo. Another major feature we created was to allow employees to add information about the status of a home during the build process to the customers.The backend of the website was written in pure PHP and MYSQL for data\nHighlights # Redisgned entire site to be modern and responsive Updated admin section to staff Implamented blog and search functionality Made pages interactive with up to date JavaScript tools Education #Even though I have many years of professional experience I beilieve education is important so I decided to go back to University after Covid to get my degree in Computer Science\nB.S Computer Science #Boise State University (2021 - Present)\n","date":"1 January 0001","permalink":"/resume/","section":"Andrew Rady","summary":"","title":"Resume"}]